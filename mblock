#!/usr/bin/env ruby

require 'httparty'
require 'zlib'
require 'json'

# generated in the developer section of the admin UI
ACCESS_TOKEN = ENV['MASTO_TOKEN']
if ACCESS_TOKEN.nil? then
  print "expected MASTO_TOKEN environment variable\n"
  exit 1
end

# examples: my.domain, mastodon.social, infosec.exchange
INSTANCE_DOMAIN = ENV['MASTO_DOMAIN']
if INSTANCE_DOMAIN.nil? then
  print "expected MASTO_DOMAIN environment variable\n"
  exit 1
end

URL_BASE = "https://#{INSTANCE_DOMAIN}/api/v1/"  

blocked_domains = HTTParty.get("#{URL_BASE}admin/domain_blocks", headers: {
  Authorization: "bearer #{ACCESS_TOKEN}"
}).map{ |entry| [entry['domain'], {comment: entry['private_comment'], severity: entry['severity']}]}.to_h

case ARGV[0]
when "export"
  File.open("blocked_domains.gz", 'w') { |f| 
    compressed = Zlib::Deflate.deflate(blocked_domains.to_json)
    f.write compressed
  }
when "import"
  File.open("blocked_domains.gz", 'r') { |f| 
    compressed = f.read
    loaded_domain_blocks = JSON.parse(Zlib::Inflate.inflate(compressed))
  
  
    domains_to_block = loaded_domain_blocks.keys - blocked_domains.keys
  
    domains_to_block.each do |domain| 
      severity = loaded_domain_blocks[domain]['severity']
      comment = loaded_domain_blocks[domain]['comment']      
      print "Adding block for #{domain} with severity #{severity} and comment \"#{comment}\"\n"
      HTTParty.post("#{URL_BASE}admin/domain_blocks", query: {domain: domain, severity: severity, private_comment: comment}, headers: {
        Authorization: "bearer #{ACCESS_TOKEN}"
      })
    end
  }
else
  print "Usage: mblock (export|import)"
end
