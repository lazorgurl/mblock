#!/usr/bin/env ruby

require 'httparty'
require 'zlib'
require 'json'

# generated in the developer section of the admin UI
ACCESS_TOKEN = ENV['MASTO_TOKEN']
if ACCESS_TOKEN.nil? then
  print "expected MASTO_TOKEN environment variable\n"
  exit 1
end

# examples: my.domain, mastodon.social, infosec.exchange
INSTANCE_DOMAIN = ENV['MASTO_DOMAIN']
if INSTANCE_DOMAIN.nil? then
  print "expected MASTO_DOMAIN environment variable\n"
  exit 1
end

registry = ENV['MBLOCK_REGISTRY_URL']
if registry.nil? then
  registry = "https://mblock.toot.lgbt/"
end
REGISTRY_URL_BASE = registry

URL_BASE = "https://#{INSTANCE_DOMAIN}/api/v1/"  

def apply_domain_blocks(blocked_domains, domains_to_block)
  domains_to_block = domains_to_block.reject {|k, v| blocked_domains.keys.include?(k)}

  domains_to_block.each do |domain, details|    
    print "Adding block for #{domain} with severity #{details['severity']} and comment \"#{details['comment']}\"\n"
    post = HTTParty.post("#{URL_BASE}admin/domain_blocks", query: {
      domain: domain, 
      severity: details['severity'], 
      private_comment: details['comment']
    }, headers: {
      Authorization: "bearer #{ACCESS_TOKEN}",
    })
    if post.response.code.to_i != 200 then
      print "#{patch.response.code.to_i} #{patch.response.body}\n"
    end
  end
end

blocked_domains = HTTParty.get("#{URL_BASE}admin/domain_blocks", headers: {
  Authorization: "bearer #{ACCESS_TOKEN}",
  Accept: "application/gzip"
}).map{ |entry| [entry['domain'], {comment: entry['private_comment'], severity: entry['severity']}]}.to_h

case ARGV[0]
when "dump"
  File.open("blocked_domains.gz", 'r') { |f| 
    compressed = f.read
    print Zlib::Inflate.inflate(compressed)
  }

when "fetch"
  registry = HTTParty.get(
    "#{REGISTRY_URL_BASE}domains",
    headers: {
      Accept: "application/gzip"
    } 
  )
  domains_to_block = JSON.parse(Zlib::Inflate.inflate(registry.body))
  apply_domain_blocks(blocked_domains, domains_to_block)

when "share"
  compressed = Zlib::Deflate.deflate(blocked_domains.to_json)
  patch = HTTParty.patch(
    "#{REGISTRY_URL_BASE}domains", 
    query: {domain: INSTANCE_DOMAIN}, 
    headers: {Authorization: "bearer #{ACCESS_TOKEN}", "Content-Type": "application/gzip"}, 
    body: compressed
  )

  if patch.response.code.to_i != 200 then
    print "#{patch.response.code.to_i} #{patch.response.body}\n"
    exit 1
  end
when "export"
  File.open("blocked_domains.gz", 'w') { |f| 
    compressed = Zlib::Deflate.deflate(blocked_domains.to_json)
    f.write compressed
  }
when "import"
  File.open("blocked_domains.gz", 'r') { |f| 
    compressed = f.read
    loaded_domain_blocks = JSON.parse(Zlib::Inflate.inflate(compressed))
    apply_domain_blocks(blocked_domains, loaded_domain_blocks)
  }
else
  print "Usage: mblock (export|import|share|fetch)"
end
